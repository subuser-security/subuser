#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

#external imports
import sys,optparse
#internal imports
import subuserlib.registry,subuserlib.permissions,subuserlib.subprocessExtras,subuserlib.commandLineArguments

####################################################
def parseCliArgs():
  usage = "usage: subuser %prog"
  description = """ Clean your system of unneeded images/libraries/executable-less programs.  If a libarary has no programs depending on it, uninstall that libarary.
"""
  parser = optparse.OptionParser(usage=usage,description=description,formatter=subuserlib.commandLineArguments.HelpFormatterThatDoesntReformatDescription())
  return parser.parse_args()

def gatherUnneededLibs():
  """ Returns a list of unneeded libaries. """
  unneededLibs = []
  for program in subuserlib.registry.getInstalledPrograms():
    if not subuserlib.permissions.hasExecutable(program) and not subuserlib.registry.hasInstalledDependencies(program):
      unneededLibs.append(program)
  return unneededLibs

def cleanUnneededLibs():
  programsToUninstall = gatherUnneededLibs()
  if len(programsToUninstall) > 0:
    performUninstalls(programsToUninstall)
  else:
    print("Looks like your system is already clean.")

def performUninstalls(programsToUninstall):
  # Display the programs that will be uninstalled.
  print("The following programs will be uninstalled:")
  for program in programsToUninstall:
    print(program)
  # Ask the user if they want to continue.
  if raw_input("Continue [y/n]? ") == "y":
    # Preform the uninstallation.
    for program in programsToUninstall:
      subuserlib.subprocessExtras.subprocessCheckedCall(["subuser","uninstall",program])

#################################################################################################

parseCliArgs()
cleanUnneededLibs()
