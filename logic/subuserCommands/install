#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.
import sys
import os
import json
import subuserlib.utils
import subuserlib.permissions
import subuserlib.paths
import subuserlib.installTime
import subuserlib.availablePrograms
import subuserlib.registry
import subuserlib.installTime

######################################################
programName = sys.argv[1]
home = os.path.expanduser("~")
######################################################

def showHelp():
 """
  Display a help message for the install mode of the subuser command.
 """ 
 print("""To install a package list it's name:
 $ subuser install vim

Options:
 --from-cache build this image using layers from the cache
 """)

def installProgram():
 """
 Build the docker image associated with a program and create a tiny executable to add that image to your path.
 """
 print("Installing "+programName)

 permissions = subuserlib.permissions.getPermissions(programName)

 try:
  dependency = permissions["dependency"]
  if not subuserlib.registry.isProgramInstalled(dependency):
   subuserlib.utils.subprocessCheckedCall(["subuser","install","--from-cache",dependency])
 except KeyError:
  pass

 # build+tag docker image
 programDir = subuserlib.paths.getProgramSrcDir(programName)
 dockerImageDir = os.path.join(programDir,"docker-image")
 if fromCache:
  cacheArg = "--no-cache=false"
 else: 
  cacheArg = "--no-cache=true"
 subuserlib.utils.subprocessCheckedCall(["docker","build","-rm",cacheArg,"--tag=subuser-"+programName+"",dockerImageDir])

 # Create a small executable that just calls the real executable in the docker image.
 if 'executable' in permissions:
  redirect="""#!/bin/bash
subuser run """+ programName +" $@\n"
  executablePath=subuserlib.paths.getExecutablePath(programName)
  executableFile = open(executablePath,'w')
  executableFile.write(redirect)
  executableFile.close()
  subuserlib.utils.subprocessCheckedCall(["chmod","+x",executablePath])
 
  try:
   lastUpdateTime = permissions["last-update-time"]
  except KeyError:
   lastUpdateTime = subuserlib.installTime.currentTimeString()
 
  subuserlib.registry.registerProgram(programName,lastUpdateTime)

##################################################################

# Should we print a help message
if sys.argv[1] == "help" or sys.argv[1] == "--help" or sys.argv[1] == "-h":
 showHelp()
 exit()

# Are we to use layers from the cache when building the docker image
fromCache = False
if sys.argv[1] == "--from-cache":
 fromCache = True
 programName = sys.argv[2]

# Does the program the user wan't installed exist?
if not subuserlib.availablePrograms.available(programName):
 print(programName+" not available for instaliation.")
 showHelp()
else:
 installProgram()


