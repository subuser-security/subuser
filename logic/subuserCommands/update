#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

# This command updates all or some of the installed subuser programs.
import sys
import subprocess
import subuserlib.utils
import subuserlib.registry
import subuserlib.permissions
import subuserlib.dockerImages
import subuserlib.installCommon

#####################################################################################
def printHelp():
  print("""Update subuser-programs:
  $ subuser update [program-names] [options]
  
  OPTIONS:
  --all 
      Updates all subuser-programs whose Last Update Time Changed
      You should run git pull before doing this in order to get an up-to-date program list.

  EXAMPLES:
    $ subuser update --all
    
    # updates in any case vim firefox
    $ subuser update vim firefox
    
    # updates in any case vim firefox and all subuser-programs whose Last Update Time Changed
    $ subuser update vim firefox --all
""")

def getProgramsWhosLastUpdateTimesChanged():
  """ Returns a list of progams who's last-update-time has changed since it was installed. """
  programsWhosLastUpdateTimeChanged = []
  registry = subuserlib.registry.getRegistry()
  for program, registeredInfo in registry.iteritems():
    availableLastUpdateTime = subuserlib.permissions.getPermissions(program).get("last-update-time",None)
    installedLastUpdateTime = registeredInfo.get("last-update-time",None)
    if not availableLastUpdateTime == installedLastUpdateTime and not availableLastUpdateTime == None:
      programsWhosLastUpdateTimeChanged.append(program)
  return programsWhosLastUpdateTimeChanged

def uninstall(program):
  subuserlib.utils.subprocessCheckedCall(["subuser","uninstall",program])

def uninstallProgramsToBeUpdated(programsToBeUpdated):
  programsToBeUninstalled = set(programsToBeUpdated)

  uninstalledPrograms = set([])
  while not programsToBeUninstalled == uninstalledPrograms:
    for program in programsToBeUninstalled:
      if not subuserlib.registry.hasInstalledDependencies(program):
        uninstall(program)
        uninstalledPrograms.add(program)

def installProgramsToBeUpdated(programsToBeUpdated):
  for program in programsToBeUpdated:
    if subuserlib.permissions.hasExecutable(program): # Don't install libraries as these might have changed and no longer be needed.  They'll automatically get installed anyways.
      subuserlib.installCommon.installProgramAndDependencies(program, cacheArg="--no-cache=true")

def runUpdate(programsToBeUpdated):
  print("The following programs will be updated:")
  for program in programsToBeUpdated:
    print(program)
  while subuserlib.dockerImages.areProgramsRunning(programsToBeUpdated):
    print("PLEASE: close these programs before continuing. If there seem to be containers hanging around when the program isn't even running you might try:")
    print(" $ docker kill <container-id>")
    print("You still need to close:")
    for runningProgram in subuserlib.dockerImages.getRunningProgramsWithNames(programsToBeUpdated):
      print(runningProgram)
    shouldQuit = raw_input("Press enter to continue(or q to quit): ")
    if shouldQuit == 'q':
      exit()
  choice = raw_input("Do you want to continue updating [y/n]? " )
  if choice in ["Y","y"]:
    uninstallProgramsToBeUpdated(programsToBeUpdated)
    installProgramsToBeUpdated(programsToBeUpdated)
  else:
    sys.exit()

def updateSomePrograms(programs):
  programsToBeUpdated = set()
  dependencyMatrix = subuserlib.registry.getDependencyMatrix(subuserlib.availablePrograms.getAvailablePrograms())
  for program in programs:
    programsToBeUpdated.add(program)
    for dependent in dependencyMatrix[program]["required-by"]:
      if subuserlib.registry.isProgramInstalled(dependent):
        programsToBeUpdated.add(dependent)
  runUpdate(list(programsToBeUpdated))


#################################################################################################
if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
  printHelp()
  sys.exit()
#################################################################################################

commandOptionList = ['--all']
userProgramList, userOptionList = subuserlib.utils.getUserCommandLine(sys.argv[1:], commandOptionList)

if '--all' in userOptionList:
  #use this in case the user specified also some program names plus --all
  userProgramList = list(set(userProgramList + getProgramsWhosLastUpdateTimesChanged())) 

#Check if there is anything to do
if userProgramList:
  updateSomePrograms(userProgramList)
  # Ensure that all programs which we have requested be updated are still installed after the update:
  for program in userProgramList:
    if not subuserlib.registry.isProgramInstalled(program):
      subuserlib.installCommon.installProgramAndDependencies(program, cacheArg="--no-cache=true")
else:
  print("\nThere is nothing to be updated")
