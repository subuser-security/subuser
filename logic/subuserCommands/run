#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

import sys
import os
import getpass
import subprocess
import subuserlib.permissions
import subuserlib.dockerImages
###############################################################
username = getpass.getuser()
cwd = os.getcwd()
home = os.path.expanduser("~")
###############################################################
def printHelp():
 print("""Run a program installed with subuser.  For example: subuser run firefox [optional arguments to be pass on to the program]
$ subuser run firefox 
$ subuser run firefox  -new-instance -safe-mode

This command is useful if you want to put `~/subuser/bin` at the end of your path.  If you do that, subuser programs will not have precidence over "normally" installed programs.

The 'run' command may optionally take the a special single argument: `--container` which will logon to an interactive shell (new container of a subuser program)
  $ subuser run firefox --container
  
The command option '--container' is useful if you want to inspect on a shell basis the program container and is similar to the docker comand: 'docker run -i -t subuser-program-name path-to-shell'
""")

def getArgsToPassToProgram():
 if len(sys.argv) > 2:
  return sys.argv[2:]
 else:
  return []

def getAllowNetworkAccessArg(permissions):
 try:
  allowNetworkAccess = permissions["allow-network-access"]
 except KeyError:
  allowNetworkAccess = False

 if allowNetworkAccess:
  return "--networking=true"
 else:
  return "--networking=false"

def setupHostSubuserHome(home):
 if not os.path.exists(home):
  os.makedirs(home)

def makeSystemDirVolumeArgs(systemDirs):
 return ["-v="+systemDir+":"+systemDir+":ro" for systemDir in systemDirs]

def makeUserDirVolumeArgs(userDirs):
 return ["-v="+os.path.join(home,userDir)+":"+os.path.join("/userdirs/",userDir)+":rw" for userDir in userDirs]
 
def runProgram(programName):
 dockerImageName = subuserlib.dockerImages.getImageTagOfInstalledProgram(programName)

 #CHECK: interactiveContainerLogon
 try:
  if sys.argv[2] == "--container":
   if subuserlib.permissions.hasShell(programName):
    pathToShelll = subuserlib.permissions.getPermissions(programName)["path-to-shell"]
    dockerCommand = ["docker","run","-i","-t","-rm",dockerImageName,pathToShelll]
    subprocess.call(dockerCommand)
   else:
    print("<%s> has no permission to logon to shell" % programName)
   sys.exit()
 except IndexError:
  pass
  
 args=getArgsToPassToProgram()

 permissions = subuserlib.permissions.getPermissions(programName)

 allowNetworkAccessArg = getAllowNetworkAccessArg(permissions)
 executable = permissions["executable"]
 setupUserAndRunPath = os.path.join("/launch","setupUserAndRun")
 hostSubuserHome = subuserlib.paths.getProgramHomeDirOnHost(programName)
 setupHostSubuserHome(hostSubuserHome)

 dockersideScriptsPath = subuserlib.paths.getDockersideScriptsPath()
 dockersideBinPath = "/launch"
 dockersidePWDPath = os.path.join("/home","pwd")

 try:
  x11Enabled = permissions["x11"]
 except KeyError:
  x11Enabled = False

 if x11Enabled:
  x11Args = ["-e","DISPLAY=unix"+os.environ['DISPLAY'],"-v=/tmp/.X11-unix:/tmp/.X11-unix:rw"]
 else: x11Args = []

 try:
  soundEnabled = permissions["sound"]
 except KeyError:
  soundEnabled = False

 if soundEnabled:
  soundArgs =  ["-v=/dev/snd:/dev/snd:rw","-lxc-conf=lxc.cgroup.devices.allow = c 116:* rwm"]
 else:
  soundArgs = []

 try:
  privileged = permissions["privileged"]
 except KeyError:
  privileged = False
 
 if privileged:
  privilegedArg = ["-privileged"]
 else:
  privilegedArg = []

 try:
  systemDirs = permissions["system-dirs"]
  systemDirVolumeArgs = makeSystemDirVolumeArgs(systemDirs)
 except KeyError:
  systemDirVolumeArgs = []

 try:
  userDirs = permissions["user-dirs"]
  #Create symlinks to userdirs in program's home dir.
  for userDir in userDirs:
   source = os.path.join("/userdirs/",userDir)
   destination = os.path.join(hostSubuserHome,userDir)
   if not os.path.islink(destination):
    os.symlink(source,destination)
  userDirVolumeArgs = makeUserDirVolumeArgs(userDirs)
 except KeyError:
  userDirVolumeArgs = []

 try:
  inheritWorkingDirectory = permissions["inherit-working-directory"]
 except KeyError:
  inheritWorkingDirectory = False

 if inheritWorkingDirectory:
  workingDirectoryVolumeArg = ["-v="+cwd+":/home/pwd:rw"]
 else:
  workingDirectoryVolumeArg = []

 volumeArgs = ["-v="+hostSubuserHome+":"+home+":rw"
  ,"-v="+dockersideScriptsPath+":"+dockersideBinPath+":ro"] + workingDirectoryVolumeArg + systemDirVolumeArgs + userDirVolumeArgs


 dockerCommand = ["docker","run","-i","-t","-rm",allowNetworkAccessArg]+privilegedArg+volumeArgs+x11Args+soundArgs+[dockerImageName,setupUserAndRunPath,username,executable]+args

 #print(dockerCommand)
 subprocess.call(dockerCommand)

#################################################################################################
if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
 printHelp()
 sys.exit()
#################################################################################################

programName = sys.argv[1]
runProgram(programName)
