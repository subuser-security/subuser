#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.

import sys
import os
import getpass
import subprocess
import subuserlib.permissions
import subuserlib.dockerImages
###############################################################
username = getpass.getuser()
cwd = os.getcwd()
home = os.path.expanduser("~")
###############################################################
def printHelp():
  print("""Run a program installed with subuser.  For example:
$ subuser run firefox

This command is useful if you want to put `~/subuser/bin` at the end of your path.  If you do that, subuser programs will not have precidence over "normally" installed programs.
""")

def getArgsToPassToProgram():
  if len(sys.argv) > 2:
    return sys.argv[2:]
  else:
    return []

def getAllowNetworkAccessArg(permissions):
  if subuserlib.permissions.getAllowNetworkAccess(permissions):
    return "--networking=true"
  else:
    return "--networking=false"

def setupHostSubuserHome(home):
  if not os.path.exists(home):
    os.makedirs(home)

def makeSystemDirVolumeArgs(systemDirs):
  return ["-v="+systemDir+":"+systemDir+":ro" for systemDir in systemDirs]

def makeUserDirVolumeArgs(userDirs):
  return ["-v="+os.path.join(home,userDir)+":"+os.path.join("/userdirs/",userDir)+":rw" for userDir in userDirs]

def runProgram(programName):
  dockerImageName = subuserlib.dockerImages.getImageTagOfInstalledProgram(programName)

  args=getArgsToPassToProgram()

  permissions = subuserlib.permissions.getPermissions(programName)

  allowNetworkAccessArg = getAllowNetworkAccessArg(permissions)
  executable = subuserlib.permissions.getExecutable(permissions)
  setupUserAndRunPath = os.path.join("/launch","setupUserAndRun")
  hostSubuserHome = subuserlib.paths.getProgramHomeDirOnHost(programName)
  setupHostSubuserHome(hostSubuserHome)

  dockersideScriptsPath = subuserlib.paths.getDockersideScriptsPath()
  dockersideBinPath = "/launch"
  dockersidePWDPath = os.path.join("/home","pwd")

  if subuserlib.permissions.getX11(permissions):
    x11Args = ["-e","DISPLAY=unix"+os.environ['DISPLAY'],"-v=/tmp/.X11-unix:/tmp/.X11-unix:rw"]
  else: x11Args = []

  if subuserlib.permissions.getSound(permissions):
    soundArgs =  ["-v=/dev/snd:/dev/snd:rw","-lxc-conf=lxc.cgroup.devices.allow = c 116:* rwm"]
  else:
    soundArgs = []

  if subuserlib.permissions.getPrivileged(permissions):
    privilegedArg = ["-privileged"]
  else:
    privilegedArg = []

  systemDirVolumeArgs = makeSystemDirVolumeArgs(subuserlib.permissions.getSystemDirs(permissions))

  def setupUserDirSymlinks(userDirs):
    """ Create symlinks to userdirs in program's home dir. """
    for userDir in userDirs:
      source = os.path.join("/userdirs/",userDir)
      destination = os.path.join(hostSubuserHome,userDir)
      if not os.path.islink(destination):
        os.symlink(source,destination)

  userDirs = subuserlib.permissions.getUserDirs(permissions)
  setupUserDirSymlinks(userDirs)
  userDirVolumeArgs = makeUserDirVolumeArgs(userDirs)

  if subuserlib.permissions.getInheritWorkingDirectory(permissions):
    workingDirectoryVolumeArg = ["-v="+cwd+":/home/pwd:rw"]
  else:
    workingDirectoryVolumeArg = []

  volumeArgs = ["-v="+hostSubuserHome+":"+home+":rw"
    ,"-v="+dockersideScriptsPath+":"+dockersideBinPath+":ro"] + workingDirectoryVolumeArg + systemDirVolumeArgs + userDirVolumeArgs

  dockerCommand = ["docker","run","-i","-t","-rm",allowNetworkAccessArg]+privilegedArg+volumeArgs+x11Args+soundArgs+[dockerImageName,setupUserAndRunPath,username,executable]+args

  #print(dockerCommand)
  subprocess.call(dockerCommand)

#################################################################################################
if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
  printHelp()
  sys.exit()
#################################################################################################

programName = sys.argv[1]
runProgram(programName)
