#!/usr/bin/env python
# This file should be compatible with both Python 2 and 3.
# If it is not, please file a bug report.
import sys
import subuserlib.utils
import subuserlib.registry
import subuserlib.paths
import subprocess

#######################################################
def printHelp():
 print("""Save a compressed image of an installed subuser program. NOTE: this operation does not save that program's home directory.
 It only saves the original installed docker image of the subuser program and not any changes made afterwards. (no container)
 $ subuser save-compressed-image program-name
""")

def saveImage(programName):
 print("Saving <%s> to compressed docker image file...." % programName)
 finalCompressedImagesPath = subuserlib.paths.getAvailableProgramsSavedCompressedImagePath()+"/"+programName+".tar.xz"
 dockerCommand = "docker save subuser-%s | xz > %s" % (programName, finalCompressedImagesPath)
 subuserlib.utils.subprocessCheckedCall([dockerCommand], shell=True)
 
 #TODO: maybe add  xzcompression level 0-9 dockerCommand = "docker save subuser-%s | xz -%s > %s" % (programName, xzCompressionLevel, finalCompressedImagesPath)
 #if one wants to load it and TAG it correctly we need the ID somewhere: maybe reqister it similart to: installed-programs.json
 #dockerCommand = """(docker inspect subuser-%s | grep id | cut -d '"' -f 4)""" %  programName
 #programDockerImageID = subprocess.check_output([dockerCommand], shell=True)
 #print(programDockerImageID)
 #dockerCommand = """(docker inspect subuser-%s | grep created | cut -d '"' -f 4)""" % programName
 #programDockerImageCreationTime = subprocess.check_output([dockerCommand], shell=True)
 #print(programDockerImageCreationTime)
 
 #TO LOAD SOMETHING LIKE
 #programDockerImageID  get it from some requistry like a: saved-program-images.json
 #dockerCommand = "xzcat %s | docker load && docker tag %s subuser-%s" % (finalCompressedImagesPath, programDockerImageID, programName))
 
#################################################################################################
if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
 printHelp()
 sys.exit()
#################################################################################################

programName = sys.argv[1]

#check if the program is installed
if not subuserlib.registry.isProgramInstalled(programName):
 print("Could not save-compressed-image: program <%s> is not installed." % programName)
 print("\nInstalled programs are: ")
 installedPrograms = subuserlib.registry.getInstalledPrograms()
 for program in installedPrograms.keys():
  print(' '+program)
else:
 saveImage(programName)
